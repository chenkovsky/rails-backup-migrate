h1. Rails Backup Migrate

A gem that provides a rake task for backing up your database and uploaded files to an archive and restoring them from an archive.

You can archive schema, schema+data, files, or schema+data+files. Each archive action has a restore counterpart. The data from the database is backed up to a .yml file for each table that is database independent.

So you can use Rails Backup Migrate to get data out of one kind of database and easily load it into another kind.

h2. Quick Start

Installing the gem:

<pre><code>  $ gem install rails-backup-migrate</code></pre>

Add the following line to your rails application's Rakefile
<pre><code>  require 'rails-backup-migrate'</code></pre>

To backup everything in a rails instance:
<pre><code>  $ rake site:backup</code></pre>

Everything is saved in an archive file, named by default 'site-backup.tgz'. Copy/move this to another rails instance
<pre><code>  $ rake site:restore</code></pre>

h2. More info

The backup file can be specified with a command line argument in rake's (wierd) format:

<pre></code>  $ rake site:backup[/path/to/file.tgz]</code></pre>

h2. Compatibility

Tested initially on 'redmine' using rails 2.3.11 and some simpler tests with rails 3. Has been tested with MySQL and Sqlite3 databases. Further testing with postgres to be done.

This requires a system with access to the `tar` command in your path. (Easy for Mac & *nixes, may require a posix environment such as cygwin under Windows.)

h3. Known Issues:

- under ruby 1.9.2, the YAML export (in the `rake site:backup` task fails extended characters in ASCII to UTF8 conversion) (Github Issue #4)

h2. Contributors

Matt Connolly - main author of gem
Tobias LÃ¼tke - wrote a `"backup.rake":http://blog.leetsoft.com/2006/5/29/easy-migration-between-databases` file that inspired the database backup portion. 

h2. License

GPL(General Public License) - See LICENSE

